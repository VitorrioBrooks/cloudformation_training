{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation - Reference Application Database Tier.",

  "Parameters" : {
    "Project":{
       "Description":"Name of Project",
       "Type":"String",
       "Default":"CFN-Training"
    },
    "VPC":{
      "Description":"ID of VPC",
      "Type":"String",
      "Default":""
    },
    "VPCCIDR":{
      "Description":"Cidr block of VPC",
      "Type":"String",
      "MinLength":"9",
      "MaxLength":"18",
      "Default":"0.0.0.0/0",
      "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription":"must be a valid CIDR range of the form x.x.x.x/x."
    },
    "KeyPair" : {
      "Description" : "KeyPair Name for Instances.",
      "Type" : "String",
      "Default" : "",
      "ConstraintDescription" : "must be a existing Key Pair."
    },
    "BucketName" : {
      "Description" : "The S3 bucket containing config files",
      "Type" : "String",
      "Default" : "",
      "ConstraintDescription" : "must be a string."
    },
    "ConfigStartCommand" : {
      "Description" : "The command to start configuration management",
      "Type" : "String",
      "Default" : "",
      "ConstraintDescription" : "must be a string."
    },
    "ProvisionFileName" : {
      "Description" : "The config file name",
      "Type" : "String",
      "Default" : "",
      "ConstraintDescription" : "must be a string."
    },
    "AppInstanceType" : {
      "Description" : "Application EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "m1.small","m1.medium"],
      "ConstraintDescription" : "must be a m1.small or m1.medium"
    },
   "AppInstanceProfile":{
      "Description":"Physical ID of AppInstanceProfile",
      "Type":"String",
      "Default":""
    },    
   "ELBAz1Subnet":{
      "Description":"Physical ID of ELBAz1Subnet",
      "Type":"String",
      "Default":""
    },
   "ELBAz2Subnet":{
      "Description":"Physical ID of ELBAz2Subnet",
      "Type":"String",
      "Default":""
    },
   "Az1Subnet":{
      "Description":"Physical ID of Az1Subnet",
      "Type":"String",
      "Default":""
    },
   "Az2Subnet":{
      "Description":"Physical ID of Az2Subnet",
      "Type":"String",
      "Default":""
    },
   "MaxProvisionTime":{
      "Description":"Maximum allowable time (seconds) for the server to provision before the process is aborted and the instance destroyed.",
      "Type":"Number",
      "Default":"1500",
      "MinValue":"120",
      "MaxValue":"3600"
    },
    "ELBTarget" : {
      "Description" : "Location to check for health. Must return 200 OK",
      "Type" : "String",
      "Default" : "TCP:80",
      "ConstraintDescription" : "must be a string"
    },
    "HealthCheckGracePeriod" : {
      "Description" : "Number of seconds after launch before ELB starts Health Checks.",
      "Type" : "Number",
      "Default" : "600",
      "MinValue": "40",
      "MaxValue": "5000",
      "ConstraintDescription" : "must be a number from 40 to 5000."
    },
    "ELBLatencyThreshold" : {
      "Description" : "Max number seconds permissible from the time an Elastic Load Balancer passes a request to an app server until it gets a response. Exceeding this limit sounds an alarm.",
      "Type" : "Number",
      "Default" : "30",
      "MinValue": "1",
      "MaxValue": "60",
      "ConstraintDescription" : "must be a number from 1 to 60."
    },
    "ELBUnhealthyThreshold" : {
      "Description" : "Number of consecutive health check failures before declaring an EC2 instance unhealthy.",
      "Type" : "Number",
      "Default" : "6",
      "MinValue": "2",
      "MaxValue": "10",
      "ConstraintDescription" : "must be a number from 2 to 10."
    },
    "ELBHealthyThreshold" : {
      "Description" : "Number of consecutive health check successes before declaring an EC2 instance healthy.",
      "Type" : "Number",
      "Default" : "4",
      "MinValue": "2",
      "MaxValue": "10",
      "ConstraintDescription" : "must be a number from 2 to 10."
    },
    "ELBIntervalThreshold" : {
      "Description" : "Amount of time between health checks (5 sec - 600 sec)",
      "Type" : "Number",
      "Default" : "30",
      "MinValue": "5",
      "MaxValue": "600",
      "ConstraintDescription" : "must be a number from 5 - 600"
    },
    "ELBTimeoutThreshold" : {
      "Description" : "Time to wait when receiving a response from the health check (2 sec - 60 sec).",
      "Type" : "Number",
      "Default" : "15",
      "MinValue": "2",
      "MaxValue": "60",
      "ConstraintDescription" : "must be a number from 2 to 60."
    }
  },

  "Mappings" : {
    "AWSRegionArch2AMI" : {
      "us-east-1"        : { "64" : "ami-bba18dd2" },
      "us-west-2"        : { "64" : "ami-ccf297fc" },
      "us-west-1"        : { "64" : "ami-a43909e1" },
      "eu-west-1"        : { "64" : "ami-5256b825" },
      "ap-southeast-1"   : { "64" : "ami-b4baeee6" },
      "ap-northeast-1"   : { "64" : "ami-0d13700c" },
      "ap-southeast-2"   : { "64" : "ami-5ba83761" },
      "sa-east-1"        : { "64" : "ami-c99130d4" }
    }
  },

  "Resources" : {

    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable internal access to the Database Layer",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref": "VPCCIDR" } }
        ],
        "SecurityGroupEgress" : [
          { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "udp", "FromPort" : "0",  "ToPort" : "65535",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "0",  "ToPort" : "65535",  "CidrIp" : "0.0.0.0/0" }
        ],
        "Tags" : [
          { "Key" : "project", "Value" : { "Ref": "Project" } },
          { "Key" : "Name", "Value": "You'll Want to Name This" }
        ]
      }
    },

    "DatabaseELB" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "CrossZone" : "True",
        "Subnets" : [{ "Ref" : "ELBAz2Subnet" }],
        "Listeners" : [ { "LoadBalancerPort" : "3306", "InstancePort" : "3306", "Protocol" : "TCP" }],
        "HealthCheck" : {
          "Target" : { "Ref" : "ELBTarget" },
          "HealthyThreshold" : { "Ref" : "ELBHealthyThreshold" },
          "UnhealthyThreshold" : { "Ref" : "ELBUnhealthyThreshold" },
          "Interval" : { "Ref" : "ELBIntervalThreshold" },
          "Timeout" : { "Ref" : "ELBTimeoutThreshold" }
        }
      },
      "DependsOn" : []
    },

    "EniDBAz2":{
      "Type":"AWS::EC2::NetworkInterface",
      "Properties":{
        "Description":"Network Interface for Database in AZ2",
        "GroupSet":[ { "Ref":"SecurityGroup" } ],
        "SubnetId":{ "Ref":"Az2Subnet" },
        "Tags" : [
          { "Key" : "project", "Value" : { "Ref": "Project" } }
        ]
      }
    },

    "DBAz1" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "provision" : [ "startchef", "region" ],
            "editRole" : "EditAttribute"
          },
          "EditAttribute": {
            "commands" : {
              "start" : {
                "command" : "sed -i \"s,#MASTERIP,$MASTERIP,g\" /root/Slave.json",
                "env" : { "MASTERIP" : { "Fn::GetAtt" : [ "EniDBAz2", "PrimaryPrivateIpAddress" ] }  },
                "cwd" : "~",
                "ignoreErrors" : "false"
              }
            }
          },
          "startchef" : {
            "files" : {
              "/usr/local/bin/startchef.sh" : {
                "content" : { "Fn::Join" : [ "", [ { "Ref": "ConfigStartCommand" } ] ] },
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              }
            }
          },
          "region" : {
            "files" : {
              "/root/.aws/config" : {
                "content" : { "Fn::Join" : [ "", [
                  "[default] \n",
                  "region =", { "Ref" : "AWS::Region" }, "\n"
                 ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            }
          }
        }
      },
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "IamInstanceProfile" : "",
        "SecurityGroupIds" : [ { "Ref" : "SecurityGroup" } ],
        "KeyName" : { "Ref" : "KeyPair" },
        "SourceDestCheck" : "True",
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, "64" ]},
        "UserData":{
          "Fn::Base64":{
             "Fn::Join":[
                "",
                [
                   "#!/bin/bash\n",
                   "resize2fs /dev/xvde1 \n",
                   "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 \n",
                   "export HOME=/root \n",
                   "mkdir -p /root/.aws \n",
                   "/opt/aws/bin/cfn-init -s ", { "Ref":"AWS::StackId" }, " -r DBAz1 -c provision", " --region ", { "Ref":"AWS::Region" }, "\n",
                   "aws s3 cp s3://", { "Ref": "BucketName" }, "/", { "Ref": "ProvisionFileName" }, " /usr/local/bin/provision.sh --region ", { "Ref":"AWS::Region" }, " \n",
                   "chmod +x /usr/local/bin/provision.sh \n",
                   "/usr/local/bin/provision.sh Master \n",
                   "/opt/aws/bin/cfn-init -s ", { "Ref":"AWS::StackId" }, " -r DBAz1 -c editRole \n",
                   "/usr/local/bin/startchef.sh Master \n",
                   "MY_ID=`/usr/bin/curl --silent http://169.254.169.254/latest/meta-data/instance-id` \n",
                   "aws elb register-instances-with-load-balancer --load-balancer-name ", { "Ref" : "DatabaseELB" }, " --instances $MY_ID \n",
                   "/opt/aws/bin/cfn-signal -e $? '", { "Ref":"WaitHandleApp" }, "'\n"
                ]
             ]
          }
        },
        "Tags" : [        {"Key" : "Name", "Value" : "DB" },
                          { "Key" : "project", "Value" : { "Ref": "Project" } },
                          { "Key" : "DataRole", "Value" : "Master" }
        ]
      },
      "DependsOn" : [ "DatabaseELB" ]
    },

    "WaitHandleApp":{
      "Type":"AWS::CloudFormation::WaitConditionHandle"
    },
    "WaitConditionDBAz1":{
      "Type":"AWS::CloudFormation::WaitCondition",
      "DependsOn":"DBAz1",
      "Properties":{
        "Handle":{ "Ref":"WaitHandleApp" },
        "Timeout":{ "Ref":"MaxProvisionTime"}
      }
    },

    "DBAz2" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "provision" : [ "startchef", "region" ],
            "editRole" : "EditAttribute"
          },
          "EditAttribute": {
           "commands" : {
              "start" : {
                "command" : "sed -i \"s,#MASTERIP,$MASTERIP,g\" /root/Slave.json",
                "env" : { "MASTERIP" : { "Fn::GetAtt" : [ "DBAz1", "PrivateIp" ] }  },
                "cwd" : "~",
                "ignoreErrors" : "false"
              }
            }
           },
           "startchef" : {
             "files" : {
               "/usr/local/bin/startchef.sh" : {
                 "content" : { "Fn::Join" : [ "", [ { "Ref": "ConfigStartCommand" } ] ] },
                 "mode"  : "000755",
                 "owner" : "root",
                 "group" : "root"
               }
             }
           },
          "region" : {
            "files" : {
              "/root/.aws/config" : {
                "content" : { "Fn::Join" : [ "", [
                  "[default] \n",
                  "region =", { "Ref" : "AWS::Region" }, "\n"
                 ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            }
          }
        }
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "AppInstanceType" },
        "NetworkInterfaces" : [ { "NetworkInterfaceId" : { "Ref" : "EniDBAz2"}, "DeviceIndex" : "0"} ],
        "SourceDestCheck" : "True",
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, "64" ]},
        "UserData":{
          "Fn::Base64":{
             "Fn::Join":[
                "",
                [
                   "#!/bin/bash\n",
                   "resize2fs /dev/xvde1 \n",
                   "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 \n",
                   "export HOME=/root \n",
                   "mkdir -p /root/.aws \n",
                   "/opt/aws/bin/cfn-init -s ", { "Ref":"AWS::StackId" }, " -r DBAz2 -c provision", " --region ", { "Ref":"AWS::Region" }, "\n",
                   "aws s3 cp s3://", { "Ref": "BucketName" }, "/", { "Ref": "ProvisionFileName" }, " /usr/local/bin/provision.sh --region ", { "Ref":"AWS::Region" }, " \n",
                   "chmod +x /usr/local/bin/provision.sh \n",
                   "/usr/local/bin/provision.sh Slave\n",
                   "/opt/aws/bin/cfn-init -s ", { "Ref":"AWS::StackId" }, " -r DBAz2 -c editRole \n",
                   "/usr/local/bin/startchef.sh Slave \n"
                ]
             ]
          }
        },
        "Tags" : [        {"Key" : "Name", "Value" : "DB" },
                          { "Key" : "project", "Value" : { "Ref": "Project" } },
                          { "Key" : "DataRole", "Value" : "Slave" }
        ] 
      },
      "DependsOn" : [ "WaitConditionDBAz1" ]
    }
  },

  "Outputs" : {
    "ELBURL" : {
      "Value": { "Fn::GetAtt" : [ "DatabaseELB", "DNSName" ] }
    }
  }
}
