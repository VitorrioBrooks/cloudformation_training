{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Template ELB and ASG.",

  "Parameters" : {
    "VPC":{
      "Description":"ID of VPC",
      "Type":"String",
      "Default":""
    },
     "MultiAzStack": {
       "Description":"This stack should be built across Multiple Az",
       "Type":"String",
       "Default":"False",
       "ConstraintDescription" : "must be a Boolean."
     },
     "InternalELB": {
       "Description":"This ELB is for internal use only",
       "Type":"String",
       "Default":"False",
       "ConstraintDescription" : "must be a Boolean."
     },
     "Environment" : {
       "Description" : "Environment Name",
       "Type" : "String",
       "Default" : "",
       "ConstraintDescription" : "must be a string."
     },
     "AppName" : {
       "Description" : "App Name",
       "Type" : "String",
       "Default" : "",
       "ConstraintDescription" : "must be a string."
     },
     "Project" : {
       "Description" : "Project Name",
       "Type" : "String",
       "Default" : "",
       "ConstraintDescription" : "must be a string."
     },
     "AMIID" : {
       "Description" : "The id of the AMI you want to use",
       "Type" : "String",
       "Default" : "ami-bba18dd2",
       "ConstraintDescription" : "must be a string."
     },
     "BucketName" : {
       "Description" : "The S3 bucket containing config files",
       "Type" : "String",
       "Default" : "",
       "ConstraintDescription" : "must be a string."
     },
     "ConfigStartCommand" : {
       "Description" : "The command to start configuration management",
       "Type" : "String",
       "Default" : "chef-solo -j /etc/chef/roles.json -c /root/cookbooks/solo.rb",
       "ConstraintDescription" : "must be a string."
     },
     "ProvisionFileName" : {
       "Description" : "The config file name",
       "Type" : "String",
       "Default" : "",
       "ConstraintDescription" : "must be a string."
     },
     "AppInstanceType" : {
       "Description" : "Application EC2 instance type",
       "Type" : "String",
       "Default" : "m1.small",
       "AllowedValues" : [ "m1.small","m1.medium"],
       "ConstraintDescription" : "must be a m1.small or m1.medium"
     },
    "AppInstanceProfile":{
      "Description":"Physical ID of AppInstanceProfile",
      "Type":"String",
      "Default":""
     },    
    "ELBAz1Subnet":{
      "Description":"Physical ID of InternalELBAz1Subnet",
      "Type":"String",
      "Default":""
     },
    "ELBAz2Subnet":{
      "Description":"Physical ID of InternalELBAz2Subnet",
      "Type":"String",
      "Default":""
     },
    "AppAz1Subnet":{
      "Description":"Physical ID of PublicELBAz1Subnet",
      "Type":"String",
      "Default":""
     },
    "AppAz2Subnet":{
      "Description":"Physical ID of PublicELBAz2Subnet",
      "Type":"String",
      "Default":""
    },
    "MaxProvisionTime":{
      "Description":"Maximum allowable time (seconds) for the server to provision before the process is aborted and the instance destroyed.",
      "Type":"Number",
      "Default":"1500",
      "MinValue":"120",
      "MaxValue":"3600"
    },
    "HealthCheckGracePeriod" : { 
      "Description" : "Number of seconds after launch before ELB starts Health Checks.",
      "Type" : "Number",
      "Default" : "600",
      "MinValue": "40",
      "MaxValue": "5000",
      "ConstraintDescription" : "must be a number from 40 to 5000."
    },
    "ELBLatencyThreshold" : {
      "Description" : "Max number seconds permissible from the time an Elastic Load Balancer passes a request to an app server until it gets a response. Exceeding this limit sounds an alarm.",
      "Type" : "Number",
      "Default" : "30",
      "MinValue": "1",
      "MaxValue": "60",
      "ConstraintDescription" : "must be a number from 1 to 60."      
    },    
    "ELBUnhealthyThreshold" : {
      "Description" : "Number of consecutive health check failures before declaring an EC2 instance unhealthy.",
      "Type" : "Number",
      "Default" : "6",
      "MinValue": "2",
      "MaxValue": "10",
      "ConstraintDescription" : "must be a number from 2 to 10."
    },
    "ELBHealthyThreshold" : {
      "Description" : "Number of consecutive health check successes before declaring an EC2 instance healthy.",
      "Type" : "Number",
      "Default" : "4",
      "MinValue": "2",
      "MaxValue": "10",
      "ConstraintDescription" : "must be a number from 2 to 10."
    },
    "ELBIntervalThreshold" : {
      "Description" : "Amount of time between health checks (5 sec - 600 sec)",
      "Type" : "Number",
      "Default" : "30",
      "MinValue": "5",
      "MaxValue": "600",
      "ConstraintDescription" : "must be a number from 5 - 600"
    },
    "ELBTimeoutThreshold" : {
      "Description" : "Time to wait when receiving a response from the health check (2 sec - 60 sec).",
      "Type" : "Number",
      "Default" : "15",
      "MinValue": "2",
      "MaxValue": "60",
      "ConstraintDescription" : "must be a number from 2 to 60."
    },
    "MinAppCount" : {
      "Description" : "Min number of EC2 instances to launch",
      "Type" : "Number",
      "Default" : "2",
      "MinValue": "1",
      "MaxValue": "10"
    },
    "MaxAppCount" : {
      "Description" : "Max number of EC2 instances to launch",
      "Type" : "Number",
      "Default" : "6",
      "MinValue": "1",
      "MaxValue": "10"
    },
    "ScaleUp" : {
      "Description" : "CPU Percentage to Scale Up",
      "Type" : "Number",
      "Default" : "80",
      "MinValue": "10",
      "MaxValue": "100"
    },
    "ScaleDown" : {
      "Description" : "CPU Percentage to Scale Down",
      "Type" : "Number",
      "Default" : "20",
      "MinValue": "10",
      "MaxValue": "100"
    },
    "StickySessionLength": {
      "Description" : "Cookie lifetime (in seconds) for the sticky session on the ELBs",
      "Type": "Number",
      "Default" : "3600",
      "MinValue": "0",
      "MaxValue": "60000",
      "ConstraintDescription" : "must be a valid integer"
    },
    "ScaleUpAdjustment" : {
       "Description" : "Number Of Instances to add when scaling up",
       "Type" : "Number",
       "Default" : "2",
       "MinValue": "1",
       "MaxValue": "100"
     },
     "ScaleDownAdjustment" : {
       "Description" : "Number Of Instances to remove when scaling down. Value is a String, tho only takes numbers and a preceding -",
       "Type" : "String",
       "Default" : "-2"
     },
     "ScalePeriod" : {
       "Description" : "Evaluation Period length.",
       "Type" : "Number",
       "Default" : "300",
       "MinValue": "60",
       "MaxValue": "1000"
     },
     "ScaleEvals" : {
       "Description" : "Number of Periods for Metric",
       "Type" : "Number",
       "Default" : "1",
       "MinValue": "1",
       "MaxValue": "10"
     },
     "ListenerELBPort" : {
       "Description" : "Port For ELB to listen On",
       "Type" : "Number",
       "Default" : "8080",
       "MinValue": "1",
       "MaxValue": "65535"
     },
     "ListenerInstancePort" : {
       "Description" : "Port For Instance to listen On",
       "Type" : "Number",
       "Default" : "8080",
       "MinValue": "1",
       "MaxValue": "65535"
     },
     "ListenerInstanceProtocol" : {
       "Description" : "Protocol that Instance is listening on.",
       "Type" : "String",
       "Default" : "HTTP",
       "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"]
     },
     "ListenerProtocol" : {
       "Description" : "Protocol for ELB to use in listener",
       "Type" : "String",
       "Default" : "HTTP",
       "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL"]
     },
     "ListenerCert" : {
       "Description" : "The ARN of the SSL certificate to use",
       "Type" : "String",
       "Default" : ""
     },
     "ListenerELBPort2" : {
       "Description" : "Second Port For ELB to listen On",
       "Type" : "Number",
       "Default" : "443",
       "MinValue": "1",
       "MaxValue": "65535"
     },
     "ListenerInstancePort2" : {
       "Description" : "Second Port For Instance to listen On",
       "Type" : "Number",
       "Default" : "443",
       "MinValue": "1",
       "MaxValue": "65535"
     },
     "ListenerInstanceProtocol2" : {
       "Description" : "Protocol that Instance is listening on.",
       "Type" : "String",
       "Default" : "",
       "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL", ""]
     },
     "ListenerProtocol2" : {
       "Description" : "Protocol for ELB to use in listener",
       "Type" : "String",
       "Default" : "",
       "AllowedValues": ["HTTP", "HTTPS", "TCP", "SSL", ""]
     },
     "ListenerCert2" : {
       "Description" : "The ARN of the SSL certificate to use",
       "Type" : "String",
       "Default" : ""
     },
     "OpsDisplayName":{
       "Description":"SNS topic display name.",
       "Type":"String",
       "Default":"",
       "MinLength":"1",
       "MaxLength":"100",
       "ConstraintDescription":"must be a valid string of 100 characters or less."
     },
     "OpsNotifyEmail":{
       "Description":"Email address to receive SNS notifications",
       "Type":"String",
       "Default":"",
       "MinLength":"4",
       "MaxLength":"128",
       "AllowedPattern":"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$",
       "ConstraintDescription":"must be a valid email address."
     }
   },

  "Conditions" : {
    "AzCondition" : {
      "Fn::Equals": [{ "Ref" : "MultiAzStack" }, "WhatShouldThisBe?"]
    },
    "ELBCondition": {
      "Fn::Equals": [{ "Ref" : "InternalELB" }, "True"]
    },
    "ListenerCondition": {
      "Fn::Equals": [{ "Ref" : "ListenerProtocol2" }, "" ]
    }
  },

  "Resources" : {
    "SNSTopic":{
      "Type":"AWS::SNS::Topic",
      "Properties":{
        "DisplayName":{ "Ref":"OpsDisplayName" },
        "TopicName": { "Ref":"OpsDisplayName" },
        "Subscription":[ { "Endpoint":{ "Ref":"OpsNotifyEmail" }, "Protocol":"email" } ]
      }
    },
    "AppSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable Public access to the Application Layer",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "8080",  "ToPort" : "8080",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref": "VPCCIDR" } }
        ],
        "SecurityGroupEgress" : [
          { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "udp", "FromPort" : "0",  "ToPort" : "65535",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "0",  "ToPort" : "65535",  "CidrIp" : "0.0.0.0/0" }
        ],
        "Tags" : [
          { "Key" : "project", "Value" : { "Ref": "Project" } },
          { "Key" : "Name", "Value": "App" }
        ]
      }
    },
    "ELBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable Public access to the ELB Layer",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "8080",  "ToPort" : "8080",  "CidrIp" : "0.0.0.0/0" }
        ],
        "SecurityGroupEgress" : [
          { "IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "CidrIp" : { "Ref": "VPCCIDR" } }
        ],
        "Tags" : [
          { "Key" : "project", "Value" : { "Ref": "Project" } },
          { "Key" : "Name", "Value": "ELB" }
        ]
      }
    },
    "ELB" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "CrossZone" : "True",
        "Scheme": { "Fn::If": [ "needACondition", "internal", "internet-facing" ] },
        "Subnets" : { "Fn::If": [ "AzCondition", [{ "Ref" : "ELBAz1Subnet" },{ "Ref" : "ELBAz2Subnet" }], [{ "Ref" : "ELBAz1Subnet" }] ]},
        "LBCookieStickinessPolicy" : [{
          "PolicyName" : "ELBPolicy",
          "CookieExpirationPeriod" : { "Ref" : "StickySessionLength" }
        } ],
        "Listeners" : { 
          "Fn::If": [ "ListenerCondition", 
            [ 
              { 
                "LoadBalancerPort" : { "Ref": "ListenerELBPort" }, 
                "InstanceProtocol" : { "Ref": "ListenerInstanceProtocol" }, 
                "PolicyNames" : [ "ELBPolicy" ], "SSLCertificateId": { "Ref": "ListenerCert"} 
              } 
            ], 
            [ 
              {
                "LoadBalancerPort" : { "Ref": "ListenerELBPort" }, 
                "InstancePort" : { "Ref": "ListenerInstancePort" }, 
                "Protocol" : { "Ref": "ListenerProtocol" }, 
                "InstanceProtocol" : { "Ref": "ListenerInstanceProtocol" }, 
                "PolicyNames" : [ "ELBPolicy" ], 
                "SSLCertificateId": { "Ref": "ListenerCert"} 
              }, 
              { 
                "LoadBalancerPort" : { "Ref": "ListenerELBPort2" }, 
                "InstancePort" : { "Ref": "ListenerInstancePort2" }, 
                "Protocol" : { "Ref": "ListenerProtocol2" }, 
                "InstanceProtocol" : { "Ref": "ListenerInstanceProtocol2" }, 
                "PolicyNames" : [ "ELBPolicy" ], 
                "SSLCertificateId": { "Ref": "ListenerCert2"} 
              } 
            ]
          ]
        },
        "HealthCheck" : {
          "HealthyThreshold" : { "Ref" : "ELBHealthyThreshold" },
          "UnhealthyThreshold" : { "Ref" : "ELBUnhealthyThreshold" },
          "Interval" : { "Ref" : "ELBIntervalThreshold" },
          "Timeout" : { "Ref" : "ELBTimeoutThreshold" }
        }
      },
      "DependsOn" : []
    },
    "AppASG" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
        "MinInstancesInService" : "2",
        "MaxBatchSize" : "2",
        "PauseTime" : "PT1M0S"
        }
      },     
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "provision" : [ "startchef", "region" ],
            "editRole" : "EditAttribute"
          },
         "EditAttribute": {
           "commands" : {
             "start" : {
               "command" : "sed -i \"s,#DBURL,$DBURL,g\" /root/Sync.json",
               "env" : { "DBURL" : { "Ref" : "DatabaseELBURL" }  },
                "cwd" : "~",
              " ignoreErrors" : "false"
             }
           }
         },
         "startchef" : {
           "files" : {
             "/usr/local/bin/startchef.sh" : {
               "content" : { "Fn::Join" : [ "", [ { "Ref": "ConfigStartCommand" } ] ] },
               "mode"  : "000744",
               "owner" : "root",
               "group" : "root"
             }
           }
         },
         "region" : {
           "files" : {
             "/root/.aws/config" : {
               "content" : { "Fn::Join" : [ "", [
                 "[default] \n",
                 "region = ", { "Ref" : "AWS::Region" }, "\n"
               ]]},
               "mode"  : "000644",
               "owner" : "root",
               "group" : "root"
             }
           }
         }
        }
      },
      "Properties" : {
        "AvailabilityZones" : { "Fn::If": [ "AzCondition", [{ "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] }, { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] } ], [ { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] }] ] },
        "VPCZoneIdentifier" : { "Fn::If": [ "AzCondition", [{ "Ref" : "AppAz1Subnet" },{ "Ref" : "AppAz2Subnet" }], [{ "Ref" : "AppAz1Subnet" }] ]},
        "LaunchConfigurationName" : "AppLaunchConfig",
        "HealthCheckType" : "ELB",
        "HealthCheckGracePeriod" : { "Ref" : "HealthCheckGracePeriod" }, 
        "MaxSize" : "MaxAppCount",
        "MinSize" : { "Ref": "MinAppCount" },
        "Tags" : [	{"Key" : "Name", "Value" : { "Fn::Join": [ "", [ { "Ref": "AppName" }, "-", { "Ref": "Environment" }, "-ASG" ]]}, "PropagateAtLaunch" : "true"  },
                        { "Key" : "project", "Value" : { "Ref": "Project" }, "PropagateAtLaunch" : "true"  }
        ]
      },
	"DependsOn" : []
    },

    "AppLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Ref": "AMIID" },
        "InstanceType" : { "Ref" : "AppInstanceType" },
        "UserData" : {
          "Fn::Base64" : { "Fn::Join" : ["", [
                        "#!/bin/bash\n",
                        "resize2fs /dev/xvde1 \n",
                        "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 \n",
                        "export HOME=/root \n",
                        "mkdir -p /root/.aws \n",
                        "/opt/aws/bin/cfn-init -s ", { "Ref":"AWS::StackId" }, " -r AppASG -c provision", " --region ", { "Ref":"AWS::Region" }, "\n",
                        "aws s3 cp s3://", { "Ref": "BucketName" }, "/", { "Ref": "ProvisionFileName" }, " /usr/local/bin/provision.sh \n",
                        "chmod +x /usr/local/bin/provision.sh \n",
                        "/usr/local/bin/provision.sh \n",
                        "/opt/aws/bin/cfn-init -s ", { "Ref":"AWS::StackId" }, " -r AppASG -c editRole \n",
                        "/usr/local/bin/startchef.sh Sync \n"
          ] ]}
        }
      }
    },
    "AppCPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU is high for 5 minutes",
        "MetricName": "",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "ComparisonOperator": "ThanThreshold",
        "Period": { "Ref": "ScalePeriod" },
        "EvaluationPeriods": { "Ref": "ScaleEvals" },
        "AlarmActions": [ { "Ref": "AppScaleUpPolicy" }, { "Ref": "SNSTopic" } ],
        "OKActions": [],
        "Dimensions": [
          { 
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "AppASG" }
          } 
        ]
      }
    },

    "AppCPUAlarmNormal": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU is low for 5 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "ComparisonOperator": "LessThanThreshold",
        "Period": { "Ref": "ScalePeriod" },
        "EvaluationPeriods": { "Ref": "ScaleEvals" },
        "AlarmActions": [ { "Ref": "AppScaleDownPolicy" } ],
        "OKActions": [],
        "Dimensions": [
          {
                "Name": "AutoScalingGroupName",
                "Value": { "Ref": "AppASG" }
          }
        ]
      }
    },

    "AppScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "AppASG" },
        "Cooldown" : "600",
        "ScalingAdjustment" : { "Ref": "ScaleUpAdjustment" }
      }
    },

    "AppScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "AppASG" },
        "Cooldown" : "600",
        "ScalingAdjustment" : { "Ref": "ScaleDownAdjustment" }
      }
    }
  },
  "Outputs" : {
    "ELBURL" : {
      "Value": { "Fn::GetAtt" : [ "ELB", "DNSName" ] }
    }
  }
}

